apply plugin: 'jacoco'

project.ext.jacocoEnabled = true
def htmlEnabled = true
def xmlEnabled = true

def androidTaskDependenciesUnit = [':app:testDebugUnitTest', ':cache:testDebugUnitTest']
def androidTaskDependenciesInstrumented = ':app:createDebugCoverageReport'
def javaTaskDependencies = [':Domain:test', ':Data:test', ':Remote:test']

def excludedClasses = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    'android/**/*.*',
    '**/*_Impl.class',
    '**/*_Impl$*.class',
    '**/*_Factory.class',
    '**/*_*Factory.class',
    '**/Dagger*.class',
    '**/*_MembersInjector.class',
    '**/*_ViewBinding*.*'
]
def executionDataFiles = [
    'jacoco/test.exec',
    'jacoco/testDebugUnitTest.exec',
    'outputs/code-coverage/connected/*coverage.ec'
]

def moduleSrcDir = 'src/main/java'

def pureJavaClassDir = 'classes/java/main'
def androidJavaClassDir = 'intermediates/classes/debug'
def kotlinAndroidClassDir = 'tmp/kotlin-classes/debug'
def kotlinClassDir = 'classes/kotlin/main'

def pureJavaTree = fileTree(dir: "$project.buildDir/$pureJavaClassDir", excludes: excludedClasses)
def androidJavaTree = fileTree(dir: "$project.buildDir/$androidJavaClassDir", excludes: excludedClasses)
def kotlinTree = fileTree(dir: "$project.buildDir/$kotlinClassDir", excludes: excludedClasses)
def debugTree = androidJavaTree + pureJavaTree + kotlinTree
def mainSrc = "$project.projectDir/$moduleSrcDir"

task javaModuleCoverageReport(type: JacocoReport, dependsOn: javaTaskDependencies) {
  reports {
    html.enabled htmlEnabled
    xml.enabled xmlEnabled
  }

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree])
  executionData = fileTree(dir: project.buildDir, includes: executionDataFiles)
}

task androidModuleUnitCoverageReport(type: JacocoReport, dependsOn: androidTaskDependenciesUnit) {
  reports {
    html.enabled htmlEnabled
    xml.enabled xmlEnabled
  }

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree])
  executionData = fileTree(dir: project.buildDir, includes: executionDataFiles)
}

task androidModuleInstrumentedCoverageReport(type: JacocoReport, dependsOn: androidTaskDependenciesInstrumented) {
  reports {
    html.enabled htmlEnabled
    xml.enabled xmlEnabled
  }

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree])
  executionData = fileTree(dir: project.buildDir, includes: executionDataFiles)
}

task jacocoCombinedDebugUnitCoverageReport(type: JacocoReport, dependsOn: [javaTaskDependencies, androidTaskDependenciesUnit]) {
  reports {
    html.enabled htmlEnabled
    xml.enabled xmlEnabled
  }

  def appJavaTree = fileTree(dir: "app/build/$pureJavaClassDir", excludes: excludedClasses)
  def appAndroidJavaTree = fileTree(dir: "app/build/$androidJavaClassDir", excludes: excludedClasses)
  def appKotlinJavaTree = fileTree(dir: "app/build/$kotlinAndroidClassDir", excludes: excludedClasses)
  def appDebugTree = appAndroidJavaTree + appJavaTree + appKotlinJavaTree

  def cacheJavaTree = fileTree(dir: "cache/build/$pureJavaClassDir", excludes: excludedClasses)
  def cacheAndroidJavaTree = fileTree(dir: "cache/build/$androidJavaClassDir", excludes: excludedClasses)
  def cacheKotlinJavaTree = fileTree(dir: "cache/build/$kotlinAndroidClassDir", excludes: excludedClasses)
  def cacheDebugTree = cacheAndroidJavaTree + cacheJavaTree + cacheKotlinJavaTree

  def dataJavaTree = fileTree(dir: "Data/build/$pureJavaClassDir", excludes: excludedClasses)
  def dataAndroidJavaTree = fileTree(dir: "Data/build/$androidJavaClassDir", excludes: excludedClasses)
  def dataKotlinJavaTree = fileTree(dir: "Data/build/$kotlinClassDir", excludes: excludedClasses)
  def dataDebugTree = dataAndroidJavaTree + dataJavaTree + dataKotlinJavaTree

  def domainJavaTree = fileTree(dir: "Domain/build/$pureJavaClassDir", excludes: excludedClasses)
  def domainAndroidJavaTree = fileTree(dir: "Domain/build/$androidJavaClassDir", excludes: excludedClasses)
  def domainKotlinJavaTree = fileTree(dir: "Domain/build/$kotlinClassDir", excludes: excludedClasses)
  def domainDebugTree = domainAndroidJavaTree + domainJavaTree + domainKotlinJavaTree

  def remoteJavaTree = fileTree(dir: "Remote/build/$pureJavaClassDir", excludes: excludedClasses)
  def remoteAndroidJavaTree = fileTree(dir: "Remote/build/$androidJavaClassDir", excludes: excludedClasses)
  def remoteKotlinJavaTree = fileTree(dir: "Remote/build/$kotlinClassDir", excludes: excludedClasses)
  def remoteDebugTree = remoteAndroidJavaTree + remoteJavaTree + remoteKotlinJavaTree

  sourceDirectories = files(['app/src/main/java', 'cache/src/main/java', 'Data/src/main/java', 'Domain/src/main/java', 'Remote/src/main/java'])
  classDirectories = files([appDebugTree, cacheDebugTree, dataDebugTree, domainDebugTree, remoteDebugTree])
  def appExecutionData = fileTree(dir: 'app/build', includes: executionDataFiles)
  def cacheExecutionData = fileTree(dir: 'cache/build', includes: executionDataFiles)
  def domainExecutionData = fileTree(dir: 'Domain/build', includes: executionDataFiles)
  def dataExecutionData = fileTree(dir: 'Data/build', includes: executionDataFiles)
  def remoteExecutionData = fileTree(dir: 'Remote/build', includes: executionDataFiles)
  executionData = appExecutionData + cacheExecutionData + domainExecutionData + dataExecutionData + remoteExecutionData
}

task jacocoCombinedDebugCoverageReport(dependsOn: [jacocoCombinedDebugUnitCoverageReport, androidModuleInstrumentedCoverageReport])
