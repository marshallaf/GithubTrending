# from https://medium.com/@ayltai/all-you-need-to-know-about-circleci-2-0-with-firebase-test-lab-2a66785ff3c2

version: 2

references:
  # Workspace
  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/intermediates
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/outputs/code-coverage
        - app/build/test-results
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  # Build cache
  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  # Gradle permission
  gradle_permission: &gradle_permission
    run:
      name: Set permissions on gradlew
      command: chmod +x ./gradlew

  # Android config
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

  # Gcloud config -- perhaps not needed since gcloud is supposedly installed on all Android CircleCI images now
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

  # Google services
#  export_gservices_key: &export_gservices_key
#    run:
#      name: Export Google services key environment variable
#      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
#  decode_gservices_key:
#    run:
#      name: Decode Google services key to JSON file
#      command: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

  # Gcloud services
  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google cloud key environment variable
      command: echo 'export GOOGLE_CLOUD_KEY="$GOOGLE_CLOUD_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google cloud key to JSON file
      command: echo $GOOGLE_CLOUD_KEY | base64 -di > ${HOME}/client-secret.json

jobs:
  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - *gradle_permission
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Gradle build debug
          command: ./gradlew -PciBuild=true assembleDebug assembleAndroidTest
      - *persist_debug_workspace
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - *gradle_permission
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true testDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/
  test_instrumented:
    <<: *android_config
    steps:
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project githubtrending-8c9a8
      - run:
          name: Authenticate with Google Cloud
          command:
            - >-
              gcloud auth activate-service-account firebase-adminsdk-607ak@githubtrending-8c9a8.iam.gserviceaccount.com
              --key-file ${HOME}/client-secret.json
      - run:
          name: Run instrumented tests on Firebase Test Lab
          command:
            - >-
              gcloud firebase test android run --type instrumentation
              --app app/build/outputs/apk/debug/app-debug.apk
              --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
              --device model=Nexus5X,version=26,locale=en_US,orientation=portrait
              --environment-variables coverage=true,coverageFile="/sdcard/tmp/code-coverage/connected/coverage.ec"
              --directories-to-pull=/sdcard/tmp --timeout 20m
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          # gsutil multi-threaded copy recursive skip-unsupported bucket-url destination-dir
          command: gsutil -m cp -r -U gs://test-lab-x32c7b32y56t2-ms1vs1q2x1vdc ~/workspace/firebase/
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/
  report_coverage:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - *gradle_permission
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *attach_debug_workspace
      - *attach_firebase_workspace
      - run:
          name: Move Firebase coverage report
          command: mkdir -p app/build/outputs/code-coverage/connected && cp firebase/nexus5x-26-en_US-portrait/artifacts/coverage.ec app/build/outputs/code-coverage/connected/coverage.ec
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Generate JaCoCo report
          command: ./gradlew -PciBuild=true jacocoCombinedDebugUnitCoverageReport
#      - run:
#          name: Upload coverage report to Codacy
#          command: ./gradlew -PciBuild=true uploadCoverageToCodacy
#      - run:
#          name: Upload coverage report to CodeCov
#          command: bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/

workflows:
  version: 2
  standard:
    jobs:
      - build_debug
      - test_unit:
          requires:
            - build_debug
      - test_instrumented:
          requires:
            - build_debug
      - report_coverage:
          requires:
            - test_unit
            - test_instrumented
#
